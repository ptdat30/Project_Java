// Community.jsx
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom'; // Th√™m useNavigate
// import AuthService from "../../services/authService.js"; // Removed due to resolution error
// Thay th·∫ø mock useAuth b·∫±ng import t·ª´ AuthContext
import { useAuth } from "../../context/AuthContext"; //


const Community = () => {
  const navigate = useNavigate(); //
  const { isAuthenticated, user, checkAuthSync, loading: authLoading } = useAuth(); // // L·∫•y th√™m authLoading v√† checkAuthSync
  const [activeTab, setActiveTab] = useState('posts'); //
  const [posts, setPosts] = useState([]); //
  const [leaderboard, setLeaderboard] = useState([]); //
  const [newPost, setNewPost] = useState(''); //
  const [newTitle, setNewTitle] = useState(''); //
  const [selectedPostType, setSelectedPostType] = useState(''); //
  const [postTypes, setPostTypes] = useState([]); //

  const [loadingPosts, setLoadingPosts] = useState(false); //
  const [errorPosts, setErrorPosts] = useState(null); //
  const [loadingLeaderboard, setLoadingLeaderboard] = useState(false); //
  const [errorLeaderboard, setErrorLeaderboard] = useState(null); //

  const [loadingPostTypes, setLoadingPostTypes] = useState(true); //
  const [errorPostTypes, setErrorPostTypes] = useState(null); //
  const [selectedFilter, setSelectedFilter] = useState('ALL'); //

  // Th√™m state m·ªõi ƒë·ªÉ qu·∫£n l√Ω th√¥ng b√°o truy c·∫≠p b·ªã t·ª´ ch·ªëi
  const [accessDeniedForGuest, setAccessDeniedForGuest] = useState(false); //

  useEffect(() => {
    let isMounted = true; //

    setLeaderboard([ //
      { id: 1, name: "Nguy·ªÖn VƒÉn An", days: 365, savings: 18250000, avatar: "/images/1.png", badge: "ü•á" }, //
      { id: 2, name: "Tr·∫ßn Th·ªã Mai", days: 298, savings: 14900000, avatar: "/images/20.png", badge: "ü•à" }, //
      { id: 3, name: "L√™ Ho√†ng Nam", days: 256, savings: 12800000, avatar: "/images/22.png", badge: "ü•â" }, //
      { id: 4, name: "Ph·∫°m Th·ªã Lan", days: 189, savings: 9450000, avatar: "/images/hinh1.png", badge: "üèÜ" }, //
      { id: 5, name: "V√µ Minh Khoa", days: 156, savings: 7800000, avatar: "/images/hinh2.png", badge: "‚≠ê" }, //
      { id: 6, name: "ƒê·∫∑ng Th·ªã Hoa", days: 134, savings: 6700000, avatar: "/images/hinh3.png", badge: "üí™" }, //
      { id: 7, name: "B√πi VƒÉn ƒê·ª©c", days: 112, savings: 5600000, avatar: "/images/hinh4.png", badge: "üåü" }, //
      { id: 8, name: "Ho√†ng Th·ªã Kim", days: 89, savings: 4450000, avatar: "/images/bvlq2.png", badge: "‚ú®" } //
    ]); //


    const initializePostTypes = () => { //
      const availablePostTypes = ['ACHIEVEMENT_SHARE', 'MOTIVATION', 'QUESTION', 'ADVICE']; //
      setPostTypes(availablePostTypes); //
      if (availablePostTypes.length > 0) { //
        setSelectedPostType(availablePostTypes[0]); //
      } //
      setLoadingPostTypes(false); //
    }; //

    const fetchPostData = async () => {
      try {
        setLoadingPosts(true); //
        setErrorPosts(null); //
        setAccessDeniedForGuest(false); // Reset tr·∫°ng th√°i khi fetch l·∫°i

        // C·∫ßn ensure user data is available before making requests,
        // especially for role-based checks.
        if (authLoading) return; // Wait until auth context is loaded

        // Check if user is a GUEST or has no membership before making API call
        if (user && user.role === 'GUEST' && user.membership?.id === 'FREE_TRIAL_PLAN') { // Assuming GUEST with FREE_TRIAL_PLAN is limited
          // If user is a GUEST and has no active paid membership, deny access
          setAccessDeniedForGuest(true);
          setLoadingPosts(false);
          return; // Stop the fetch if access is clearly denied by client-side logic
        }

        const token = localStorage.getItem('jwt_token'); //
        const headers = { //
          'Content-Type': 'application/json', //
        }; //
        if (token) { //
          headers['Authorization'] = `Bearer ${token}`; //
        } //

        const response = await fetch('http://localhost:8080/api/community/posts', { //
          headers: headers, //
        }); //

        if (response.status === 403) { // X·ª≠ l√Ω l·ªói 403 t·ª´ backend
          if (isMounted) {
            setAccessDeniedForGuest(true);
            setErrorPosts('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y. Vui l√≤ng n√¢ng c·∫•p g√≥i th√†nh vi√™n.');
          }
          return; // D·ª´ng x·ª≠ l√Ω ti·∫øp
        }

        if (!response.ok) { //
          const errorData = await response.json(); //
          throw new Error(`HTTP Error: ${response.status} - ${errorData.error || response.statusText}`); //
        } //

        const text = await response.text(); //
        if (!text) { //
          throw new Error('Server returned an empty response.'); //
        } //

        const jsonData = JSON.parse(text); //
        console.log(jsonData); //

        const mappedJson = jsonData.content.map(post => ({ //
          id: post.id, //
          commentsCount: post.commentsCount, //
          content: post.content, //
          createdAt: new Date(post.createdAt).toLocaleDateString(), //
          likesCount: post.likesCount, //
          postType: post.postType, //
          title: post.title, //
          pictureUrl: post.pictureUrl, //
          username: post.username, //
        })); //

        if (isMounted) { //
          setPosts(mappedJson); //
        } //
      } catch (error) { //
        if (isMounted) { //
          setErrorPosts('Kh√¥ng th·ªÉ t·∫£i b√†i vi·∫øt: ' + error.message); //
          console.error('Error fetching posts:', error); //
        } //
      } finally { //
        if (isMounted) { //
          setLoadingPosts(false); //
        } //
      }
    };

    // Ch·ªâ fetch d·ªØ li·ªáu n·∫øu AuthContext ƒë√£ t·∫£i xong v√† ng∆∞·ªùi d√πng kh√¥ng ph·∫£i GUEST ho·∫∑c c√≥ g√≥i tr·∫£ ph√≠
    if (!authLoading) {
      // Logic ki·ªÉm tra quy·ªÅn truy c·∫≠p ·ªü ƒë√¢y tr∆∞·ªõc khi g·ªçi fetchPostData
      // N·∫øu user.role l√† GUEST v√† user.membership kh√¥ng ph·∫£i l√† g√≥i tr·∫£ ph√≠, setAccessDeniedForGuest(true)
      // Otherwise, call fetchPostData().
      if (user && user.role === 'GUEST' && (!user.membership || user.membership.id === 'FREE_TRIAL_PLAN')) {
        setAccessDeniedForGuest(true);
        setLoadingPosts(false);
      } else {
        fetchPostData();
      }
    }

    initializePostTypes(); //

    return () => { //
      isMounted = false; //
    };
  }, [user, authLoading]); // Th√™m user v√† authLoading v√†o dependencies ƒë·ªÉ useEffect ch·∫°y l·∫°i khi ch√∫ng thay ƒë·ªïi.

  const getFilteredPosts = () => { //
    if (selectedFilter === 'ALL') return posts; //
    return posts.filter(post => post.postType === selectedFilter); //
  }; //

  const filterPosts = getFilteredPosts(); //

  const formatCurrency = (amount) => { //
    return new Intl.NumberFormat('vi-VN', { //
      style: 'currency', //
      currency: 'VND' //
    }).format(amount); //
  }; //

  const handleSubmitPost = async () => { //
    // Ki·ªÉm tra quy·ªÅn ·ªü ƒë√¢y tr∆∞·ªõc khi g·ª≠i b√†i vi·∫øt
    if (!isAuthenticated || (user && user.role === 'GUEST' && (!user.membership || user.membership.id === 'FREE_TRIAL_PLAN'))) {
      alert("B·∫°n kh√¥ng c√≥ quy·ªÅn ƒëƒÉng b√†i. Vui l√≤ng n√¢ng c·∫•p g√≥i th√†nh vi√™n.");
      navigate('/membership'); // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang g√≥i th√†nh vi√™n
      return;
    }

    if (!newPost.trim() || !selectedPostType || !newTitle.trim()) return; //
    const now = new Date(); //
    try { //
      const token = localStorage.getItem('jwt_token'); //
      if (!token) { //
        throw new Error('User not authenticated'); //
      } //
      const newPostData = { //
        content: newPost, //
        postType: selectedPostType, //
        title: newTitle, //
      }; //
      const response = await fetch('http://localhost:8080/api/community/posts', { //
        method: 'POST', //
        headers: { //
          'Content-Type': 'application/json', //
          'Authorization': `Bearer ${token}` //
        }, //
        body: JSON.stringify(newPostData), //
      }); //

      const responseData = await response.json(); //

      if (response.ok) { //
        console.log(responseData.message); //
        const createdPost = { //
          id: responseData.id, //
          commentsCount: 0, //
          content: newPost, //
          createdAt: new Date().toLocaleDateString(), //
          likesCount: 0, //
          postType: selectedPostType, //
          title: newTitle, //
          pictureUrl: user.pictureUrl || "/images/default-avatar.png", //
          username: user.username, //
        }; //

        setPosts(prevPosts => [createdPost, ...prevPosts]); //
        setNewPost(''); //
        setNewTitle(''); //
        setSelectedPostType(''); //
      } else { //
        console.error('Failed to create post:', responseData.error); //
        throw new Error('Failed to create post: ' + responseData.error); //
      } //
    } catch (e) { //
      console.error("Error creating post", e); //
    } //
  }; //

  return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 py-8">
        <div className="container mx-auto px-6">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="text-4xl lg:text-5xl font-bold text-gray-800 mb-4">
              üë• C·ªông ƒê·ªìng QuitSmoking
            </h1>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              K·∫øt n·ªëi, chia s·∫ª v√† h·ªó tr·ª£ l·∫´n nhau trong h√†nh tr√¨nh cai nghi·ªán thu·ªëc l√°
            </p>
          </div>

          {/* Tabs */}
          <div className="flex justify-center mb-8">
            <div className="bg-white rounded-lg shadow-lg p-2 flex space-x-2">
              <button
                  onClick={() => setActiveTab('posts')}
                  className={`px-6 py-3 rounded-lg font-medium transition-all duration-300 ${
                      activeTab === 'posts'
                          ? 'bg-green-600 text-white shadow-md'
                          : 'text-gray-600 hover:bg-green-50'
                  }`}
              >
                üìù B√†i vi·∫øt
              </button>
              <button
                  onClick={() => setActiveTab('leaderboard')}
                  className={`px-6 py-3 rounded-lg font-medium transition-all duration-300 ${
                      activeTab === 'leaderboard'
                          ? 'bg-green-600 text-white shadow-md'
                          : 'text-gray-600 hover:bg-green-50'
                  }`}
              >
                üèÜ B·∫£ng x·∫øp h·∫°ng
              </button>
            </div>
          </div>

          {activeTab === 'posts' && (
              <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
                {/* Main Content */}
                <div className="lg:col-span-3 space-y-8">
                  {/* Create Post */}
                  {/* ƒêi·ªÅu ki·ªán hi·ªÉn th·ªã ph·∫ßn t·∫°o b√†i vi·∫øt */}
                  {isAuthenticated && user && user.role !== 'GUEST' && (
                      <div className="bg-white rounded-xl shadow-lg p-6">
                        <h3 className="text-lg font-bold text-gray-800 mb-4">
                          ‚úçÔ∏è Chia s·∫ª v·ªõi c·ªông ƒë·ªìng
                        </h3>
                        <input type="text" value={newTitle} onChange={(e) => setNewTitle(e.target.value)} placeholder="Ti√™u ƒë·ªÅ c·ªßa b·∫°n " className="w-full p-4 border rounded-lg border-gray-200 mb-2 focus:ring-2 focus:ring-green-500 focus:border-transparent"></input>
                        <textarea
                            value={newPost}
                            onChange={(e) => setNewPost(e.target.value)}
                            placeholder="H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o? Chia s·∫ª ti·∫øn tr√¨nh, c√¢u chuy·ªán hay m·∫πo hay c·ªßa b·∫°n..."
                            className="w-full p-4 border border-gray-200 rounded-lg resize-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                            rows="4"
                        />
                        <div className="flex justify-between items-center mt-4">
                          {loadingPostTypes && <p className="text-gray-500">ƒêang t·∫£i lo·∫°i b√†i vi·∫øt...</p>}
                          {errorPostTypes && <p className="text-red-500">L·ªói t·∫£i lo·∫°i b√†i vi·∫øt.</p>}
                          {!loadingPostTypes && !errorPostTypes && postTypes.length > 0 && (
                              <div className="flex flex-wrap gap-2">
                                {postTypes.map(type => (
                                    <button
                                        key={type}
                                        onClick={() => setSelectedPostType(type)}
                                        className={`px-4 py-2 rounded-full text-sm font-medium transition-all ${
                                            selectedPostType === type
                                                ? 'bg-green-600 text-white'
                                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                        }`}
                                    >
                                      {type}
                                    </button>
                                ))}
                              </div>
                          )}

                          <button
                              onClick={handleSubmitPost}
                              disabled={!newPost.trim() || !selectedPostType || !newTitle.trim()}
                              className="bg-green-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-green-700 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                          >
                            ƒêƒÉng b√†i
                          </button>
                        </div>
                      </div>
                  )}

                  {/* Hi·ªÉn th·ªã th√¥ng b√°o khi truy c·∫≠p b·ªã t·ª´ ch·ªëi */}
                  {accessDeniedForGuest && (
                      <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative text-center" role="alert">
                        <strong className="font-bold">Truy c·∫≠p b·ªã t·ª´ ch·ªëi!</strong>
                        <span className="block sm:inline ml-2">Ch·ª©c nƒÉng n√†y kh√¥ng d√†nh cho kh√°ch.</span>
                        <p className="mt-2">Vui l√≤ng n√¢ng c·∫•p g√≥i th√†nh vi√™n ƒë·ªÉ truy c·∫≠p to√†n b·ªô t√≠nh nƒÉng c·ªông ƒë·ªìng.</p>
                        <button
                            onClick={() => navigate('/membership')}
                            className="mt-4 bg-green-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-green-700 transition duration-300"
                        >
                          N√¢ng C·∫•p Ngay
                        </button>
                      </div>
                  )}


                  {/* Ph·∫ßn l·ªçc b√†i vi·∫øt */}
                  {/* ·∫®n ph·∫ßn l·ªçc n·∫øu access b·ªã t·ª´ ch·ªëi */}
                  {!accessDeniedForGuest && (
                      <div className="flex flex-wrap gap-2 my-4">
                        <button
                            onClick={() => setSelectedFilter('ALL')}
                            className={`px-4 py-2 rounded-full text-sm font-medium transition-all ${
                                selectedFilter === 'ALL'
                                    ? 'bg-green-600 text-white'
                                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                            }`}
                        >
                          ALL
                        </button>
                        <button
                            onClick={() => setSelectedFilter('ACHIEVEMENT_SHARE')}
                            className={`px-4 py-2 rounded-full text-sm font-medium transition-all ${
                                selectedFilter === 'ACHIEVEMENT_SHARE'
                                    ? 'bg-yellow-500 text-white'
                                    : 'bg-yellow-100 text-yellow-700 hover:bg-yellow-200'
                            }`}
                        >
                          ACHIEVEMENT_SHARE
                        </button>
                        <button
                            onClick={() => setSelectedFilter('MOTIVATION')}
                            className={`px-4 py-2 rounded-full text-sm font-medium transition-all ${
                                selectedFilter === 'MOTIVATION'
                                    ? 'bg-blue-500 text-white'
                                    : 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                            }`}
                        >
                          MOTIVATION
                        </button>
                        <button
                            onClick={() => setSelectedFilter('QUESTION')}
                            className={`px-4 py-2 rounded-full text-sm font-medium transition-all ${
                                selectedFilter === 'QUESTION'
                                    ? 'bg-purple-500 text-white'
                                    : 'bg-purple-100 text-purple-700 hover:bg-purple-200'
                            }`}
                        >
                          QUESTION
                        </button>
                        <button
                            onClick={() => setSelectedFilter('ADVICE')}
                            className={`px-4 py-2 rounded-full text-sm font-medium transition-all ${
                                selectedFilter === 'ADVICE'
                                    ? 'bg-green-500 text-white'
                                    : 'bg-green-100 text-green-700 hover:bg-green-200'
                            }`}
                        >
                          ADVICE
                        </button>
                      </div>
                  )}


                  {/* Posts */}
                  <div className="space-y-6">
                    {loadingPosts && <div className="text-center text-gray-500">ƒêang t·∫£i b√†i vi·∫øt...</div>}
                    {errorPosts && <div className="text-center text-red-500">{errorPosts}</div>}
                    {!loadingPosts && !errorPosts && filterPosts.length === 0 && !accessDeniedForGuest && (
                        <div className="text-center text-gray-500">Ch∆∞a c√≥ b√†i vi·∫øt n√†o trong danh m·ª•c n√†y.</div>
                    )}
                    {/* Ch·ªâ hi·ªÉn th·ªã b√†i vi·∫øt n·∫øu kh√¥ng b·ªã t·ª´ ch·ªëi truy c·∫≠p */}
                    {!loadingPosts && !errorPosts && filterPosts.length > 0 && !accessDeniedForGuest && filterPosts.map(post => (
                        <div key={post.id} className="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition duration-300">
                          {/* Post Header */}
                          <div className="flex items-start space-x-4 mb-4">
                            <img
                                src={post.pictureUrl || "/images/default-avatar.png"}
                                alt={post.username}
                                className="w-12 h-12 rounded-full object-cover border-2 border-green-200"
                            />
                            <div className="flex-1">
                              <div className="flex items-center space-x-2">
                                <h4 className="font-bold text-gray-800">{post.username}</h4>
                                <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
                            Active Member
                          </span>
                              </div>
                              <div className="flex items-center space-x-4 text-sm text-gray-500">
                                <span>üóìÔ∏è {post.createdAt}</span>
                              </div>
                            </div>
                            <div className="text-right">
                        <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                            post.postType === 'ACHIEVEMENT_SHARE' ? 'bg-yellow-100 text-yellow-700' :
                                post.postType === 'MOTIVATION' ? 'bg-blue-100 text-blue-700' :
                                    post.postType === 'QUESTION' ? 'bg-purple-100 text-purple-700' :
                                        post.postType === 'ADVICE' ? 'bg-green-100 text-green-700' :
                                            'bg-gray-100 text-gray-700'
                        }`}>
                          {postTypes.find(type => type === post.postType)}
                        </span>
                            </div>
                          </div>

                          {/* Post Content */}
                          <div className="mb-4">
                            <h5 className="font-bold text-lg">{post.title}</h5>
                            <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                              {post.content}
                            </p>
                          </div>

                          {/* Post Actions */}
                          <div className="flex items-center space-x-6 pt-4 border-t border-gray-100">
                            <button className="flex items-center space-x-2 text-gray-600 hover:text-green-600 transition duration-300">
                              <span>‚ù§Ô∏è</span>
                              <span>{post.likesCount}</span>
                            </button>
                            <button className="flex items-center space-x-2 text-gray-600 hover:text-blue-600 transition duration-300">
                              <span>üí¨</span>
                              <span>{post.commentsCount}</span>
                            </button>
                            <button className="flex items-center space-x-2 text-gray-600 hover:text-purple-600 transition duration-300">
                              <span>üîó</span>
                              <span>Chia s·∫ª</span>
                            </button>
                          </div>
                        </div>
                    ))}
                  </div>
                </div>

                {/* Sidebar */}
                <div className="space-y-6">
                  {/* Quick Stats */}
                  <div className="bg-white rounded-xl shadow-lg p-6">
                    <h3 className="text-lg font-bold text-gray-800 mb-4">üìä Th·ªëng k√™ c·ªông ƒë·ªìng</h3>
                    <div className="space-y-3">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Th√†nh vi√™n ho·∫°t ƒë·ªông</span>
                        <span className="font-bold text-green-600">12,547</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">B√†i vi·∫øt h√¥m nay</span>
                        <span className="font-bold text-blue-600">156</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Th√†nh c√¥ng trong th√°ng</span>
                        <span className="font-bold text-purple-600">1,234</span>
                      </div>
                    </div>
                  </div>

                  {/* Top Contributors */}
                  <div className="bg-white rounded-xl shadow-lg p-6">
                    <h3 className="text-lg font-bold text-gray-800 mb-4">‚≠ê Ng∆∞·ªùi ƒë√≥ng g√≥p t√≠ch c·ª±c</h3>
                    {loadingLeaderboard && <div className="text-center text-gray-500">ƒêang t·∫£i b·∫£ng x·∫øp h·∫°ng...</div>}
                    {errorLeaderboard && <div className="text-center text-red-500">{errorLeaderboard}</div>}
                    {!loadingLeaderboard && !errorLeaderboard && leaderboard.length === 0 && (
                        <div className="text-center text-gray-500">Kh√¥ng c√≥ d·ªØ li·ªáu b·∫£ng x·∫øp h·∫°ng.</div>
                    )}
                    {!loadingLeaderboard && !errorLeaderboard && leaderboard.length > 0 && (
                        <div className="space-y-3">
                          {leaderboard.slice(0, 5).map((member, index) => (
                              <div key={member.id} className="flex items-center space-x-3">
                                <div className="text-lg">{member.badge}</div>
                                <img
                                    src={member.avatar}
                                    alt={member.name}
                                    className="w-8 h-8 rounded-full object-cover"
                                />
                                <div className="flex-1">
                                  <p className="font-medium text-gray-800">{member.name}</p>
                                  <p className="text-xs text-gray-500">{member.days} ng√†y</p>
                                </div>
                              </div>
                          ))}
                        </div>
                    )}
                  </div>

                  {/* Resources */}
                  <div className="bg-gradient-to-br from-green-100 to-blue-100 rounded-xl p-6">
                    <h3 className="text-lg font-bold text-gray-800 mb-4">üìö T√†i nguy√™n h·ªØu √≠ch</h3>
                    <div className="space-y-3">
                      <Link to="/plan" className="block p-3 bg-white rounded-lg shadow-sm hover:shadow-md transition duration-300">
                        <div className="font-medium text-gray-800">üéØ L·∫≠p k·∫ø ho·∫°ch cai thu·ªëc</div>
                        <div className="text-sm text-gray-600">T·∫°o l·ªô tr√¨nh ph√π h·ª£p v·ªõi b·∫°n</div>
                      </Link>
                      <Link to="/coach-consultation" className="block p-3 bg-white rounded-lg shadow-sm hover:shadow-md transition duration-300">
                        <div className="font-medium text-gray-800">üë®‚Äç‚öïÔ∏è T∆∞ v·∫•n chuy√™n gia</div>
                        <div className="text-sm text-gray-600">Nh·∫≠n h·ªó tr·ª£ t·ª´ chuy√™n gia</div>
                      </Link>
                      <Link to="/achievements" className="block p-3 bg-white rounded-lg shadow-sm hover:shadow-md transition duration-300">
                        <div className="font-medium text-gray-800">üèÜ Huy hi·ªáu th√†nh t√≠ch</div>
                        <div className="text-sm text-gray-600">Xem ti·∫øn tr√¨nh v√† th√†nh t·ª±u</div>
                      </Link>
                    </div>
                  </div>
                </div>
              </div>)}

          {activeTab === 'leaderboard' && (
              <div className="max-w-4xl mx-auto">
                <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                  <div className="bg-gradient-to-r from-green-600 to-green-700 text-white p-6">
                    <h2 className="text-2xl font-bold text-center">üèÜ B·∫£ng X·∫øp H·∫°ng C·ªông ƒê·ªìng</h2>
                    <p className="text-center text-green-100 mt-2">Nh·ªØng ng∆∞·ªùi h√πng trong h√†nh tr√¨nh cai nghi·ªán thu·ªëc l√°</p>
                  </div>

                  <div className="p-6">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                      {leaderboard.slice(0, 3).map((member, index) => (
                          <div
                              key={member.id}
                              className={`text-center p-6 rounded-xl ${
                                  index === 0 ? 'bg-gradient-to-br from-yellow-50 to-yellow-100 border-2 border-yellow-300' :
                                      index === 1 ? 'bg-gradient-to-br from-gray-50 to-gray-100 border-2 border-gray-300' :
                                          'bg-gradient-to-br from-orange-50 to-orange-100 border-2 border-orange-300'
                              }`}
                          >
                            <div className="text-4xl mb-2">
                              {index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : 'ü•â'}
                            </div>
                            <img
                                src={member.avatar}
                                alt={member.name}
                                className="w-16 h-16 rounded-full object-cover mx-auto mb-3 border-4 border-white shadow-lg"
                            />
                            <h3 className="font-bold text-gray-800">{member.name}</h3>
                            <p className="text-lg font-bold text-green-600 mt-2">{member.days} ng√†y</p>
                            <p className="text-sm text-gray-600">{formatCurrency(member.savings)} ti·∫øt ki·ªám</p>
                          </div>
                      ))}
                    </div>

                    <div className="space-y-3">
                      {leaderboard.slice(3).map((member, index) => (
                          <div key={member.id} className="flex items-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition duration-300">
                            <div className="text-2xl mr-4">#{index + 4}</div>
                            <img
                                src={member.avatar}
                                alt={member.name}
                                className="w-12 h-12 rounded-full object-cover mr-4 border-2 border-green-200"
                            />
                            <div className="flex-1">
                              <h4 className="font-bold text-gray-800">{member.name}</h4>
                              <p className="text-sm text-gray-600">{member.days} ng√†y kh√¥ng h√∫t thu·ªëc</p>
                            </div>
                            <div className="text-right">
                              <p className="font-bold text-green-600">{formatCurrency(member.savings)}</p>
                              <p className="text-sm text-gray-500">ti·∫øt ki·ªám</p>
                            </div>
                            <div className="ml-4 text-2xl">{member.badge}</div>
                          </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
          )}
        </div>
      </div>
  );
};

export default Community;