import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";

const MembershipPage = () => {
  const navigate = useNavigate();
  const { isAuthenticated, user } = useAuth();
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [currentPlan, setCurrentPlan] = useState("FREE");
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState("credit_card");
  const [processing, setProcessing] = useState(false);

  const membershipPlans = [
    {
      id: "FREE",
      name: "Mi·ªÖn Ph√≠",
      price: 0,
      originalPrice: 0,
      duration: "Vƒ©nh vi·ªÖn",
      features: [
        "‚úÖ Ghi nh·∫≠n t√¨nh tr·∫°ng h√∫t thu·ªëc c∆° b·∫£n",
        "‚úÖ T·∫°o k·∫ø ho·∫°ch cai thu·ªëc ƒë∆°n gi·∫£n", 
        "‚úÖ Th·ªëng k√™ c∆° b·∫£n",
        "‚úÖ Truy c·∫≠p c·ªông ƒë·ªìng h·∫°n ch·∫ø",
        "‚ùå T∆∞ v·∫•n chuy√™n gia",
        "‚ùå B√°o c√°o chi ti·∫øt"
      ],
      color: "border-gray-200 bg-gray-50",
      buttonColor: "bg-gray-500 hover:bg-gray-600",
      textColor: "text-gray-600",
      popular: false,
      badge: null
    },
    {
      id: "BASIC", 
      name: "C∆° B·∫£n",
      price: 99000,
      originalPrice: 149000,
      duration: "1 th√°ng",
      features: [
        "‚úÖ T·∫•t c·∫£ t√≠nh nƒÉng g√≥i mi·ªÖn ph√≠",
        "‚úÖ K·∫ø ho·∫°ch cai thu·ªëc n√¢ng cao",
        "‚úÖ Th·ªëng k√™ v√† b√°o c√°o chi ti·∫øt",
        "‚úÖ Th√¥ng b√°o ƒë·ªông vi√™n th√¥ng minh",
        "‚úÖ Truy c·∫≠p ƒë·∫ßy ƒë·ªß c·ªông ƒë·ªìng",
        "‚úÖ Huy hi·ªáu th√†nh t√≠ch",
        "‚úÖ T∆∞ v·∫•n chat c∆° b·∫£n"
      ],
      color: "border-blue-200 bg-blue-50",
      buttonColor: "bg-blue-600 hover:bg-blue-700",
      textColor: "text-blue-600",
      popular: false,
      badge: "TI·∫æT KI·ªÜM 33%"
    },
    {
      id: "PREMIUM",
      name: "Cao C·∫•p", 
      price: 249000,
      originalPrice: 399000,
      duration: "3 th√°ng",
      features: [
        "‚úÖ T·∫•t c·∫£ t√≠nh nƒÉng g√≥i c∆° b·∫£n",
        "‚úÖ T∆∞ v·∫•n 1:1 v·ªõi chuy√™n gia",
        "‚úÖ K·∫ø ho·∫°ch c√° nh√¢n h√≥a cao c·∫•p",
        "‚úÖ Ph√¢n t√≠ch t√¢m l√Ω chuy√™n s√¢u",
        "‚úÖ ∆Øu ti√™n h·ªó tr·ª£ 24/7",
        "‚úÖ Truy c·∫≠p n·ªôi dung ƒë·ªôc quy·ªÅn",
        "‚úÖ Ch∆∞∆°ng tr√¨nh coaching ri√™ng",
        "‚úÖ B√°o c√°o s·ª©c kh·ªèe chi ti·∫øt"
      ],
      color: "border-green-300 bg-gradient-to-br from-green-50 to-green-100",
      buttonColor: "bg-green-600 hover:bg-green-700",
      textColor: "text-green-600",
      popular: true,
      badge: "PH·ªî BI·∫æN NH·∫§T"
    },
    {
      id: "VIP",
      name: "VIP",
      price: 599000,
      originalPrice: 999000,
      duration: "1 nƒÉm",
      features: [
        "‚úÖ T·∫•t c·∫£ t√≠nh nƒÉng g√≥i cao c·∫•p",
        "‚úÖ Mentor c√° nh√¢n chuy√™n nghi·ªáp",
        "‚úÖ Ch∆∞∆°ng tr√¨nh detox to√†n di·ªán",
        "‚úÖ Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ mi·ªÖn ph√≠",
        "‚úÖ Dinh d∆∞·ª°ng v√† th·ªÉ d·ª•c c√° nh√¢n h√≥a",
        "‚úÖ C·ªông ƒë·ªìng VIP ƒë·ªôc quy·ªÅn",
        "‚úÖ S·ª± ki·ªán offline premium",
        "‚úÖ B·∫£o h√†nh th√†nh c√¥ng 100%"
      ],
      color: "border-purple-300 bg-gradient-to-br from-purple-50 to-pink-50",
      buttonColor: "bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700",
      textColor: "text-purple-600",
      popular: false,
      badge: "TI·∫æT KI·ªÜM 40%"
    }
  ];

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  const handleSelectPlan = (plan) => {
    if (!isAuthenticated) {
      navigate('/login');
      return;
    }
    
    if (plan.id === currentPlan) {
      return; // Already on this plan
    }
    
    setSelectedPlan(plan);
    if (plan.price === 0) {
      // Free plan - activate immediately
      handleUpgrade(plan);
    } else {
      setShowPaymentModal(true);
    }
  };

  const handleUpgrade = async (plan) => {
    setProcessing(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setCurrentPlan(plan.id);
      setShowPaymentModal(false);
      
      // Show success message
      alert(`Ch√∫c m·ª´ng! B·∫°n ƒë√£ n√¢ng c·∫•p th√†nh c√¥ng l√™n g√≥i ${plan.name}`);
      
    } catch (error) {
      alert('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } finally {
      setProcessing(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 py-12">
      <div className="container mx-auto px-6">
        {/* Header */}
        <div className="text-center mb-16">
          <h1 className="text-4xl lg:text-5xl font-bold text-gray-800 mb-6">
            üíé Ch·ªçn G√≥i Th√†nh Vi√™n
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
            N√¢ng cao h√†nh tr√¨nh cai nghi·ªán thu·ªëc l√° c·ªßa b·∫°n v·ªõi c√°c g√≥i d·ªãch v·ª• ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát. 
            T·ª´ c∆° b·∫£n ƒë·∫øn VIP, ch√∫ng t√¥i c√≥ gi·∫£i ph√°p ph√π h·ª£p cho m·ªçi nhu c·∫ßu.
          </p>
          
          {isAuthenticated && (
            <div className="mt-8 p-4 bg-white rounded-lg shadow-md inline-block">
              <p className="text-gray-600">G√≥i hi·ªán t·∫°i c·ªßa b·∫°n: 
                <span className="font-bold text-green-600 ml-2">
                  {membershipPlans.find(p => p.id === currentPlan)?.name}
                </span>
              </p>
            </div>
          )}
        </div>

        {/* Pricing Cards */}
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8 max-w-7xl mx-auto">
          {membershipPlans.map((plan) => (
            <div
              key={plan.id}
              className={`relative rounded-2xl shadow-lg ${plan.color} border-2 transition-all duration-300 hover:shadow-xl hover:scale-105 ${
                plan.popular ? 'transform scale-105 border-green-400' : ''
              }`}
            >
              {/* Popular Badge */}
              {plan.popular && (
                <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                  <span className="bg-green-600 text-white px-6 py-2 rounded-full text-sm font-bold shadow-lg">
                    ‚≠ê {plan.badge}
                  </span>
                </div>
              )}

              {plan.badge && !plan.popular && (
                <div className="absolute -top-3 -right-3">
                  <span className="bg-red-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg">
                    {plan.badge}
                  </span>
                </div>
              )}

              <div className="p-8">
                {/* Plan Name */}
                <h3 className={`text-2xl font-bold ${plan.textColor} mb-2`}>
                  {plan.name}
                </h3>

                {/* Price */}
                <div className="mb-6">
                  {plan.price === 0 ? (
                    <div className="text-3xl font-bold text-gray-600">Mi·ªÖn Ph√≠</div>
                  ) : (
                    <div>
                      <div className="flex items-baseline">
                        <span className="text-3xl font-bold text-gray-800">
                          {formatCurrency(plan.price)}
                        </span>
                        <span className="text-gray-500 ml-2">/{plan.duration}</span>
                      </div>
                      {plan.originalPrice > plan.price && (
                        <div className="text-lg text-gray-400 line-through">
                          {formatCurrency(plan.originalPrice)}
                        </div>
                      )}
                    </div>
                  )}
                </div>

                {/* Features */}
                <div className="space-y-3 mb-8">
                  {plan.features.map((feature, index) => (
                    <div key={index} className="flex items-start">
                      <span className="text-sm text-gray-700 leading-relaxed">
                        {feature}
                      </span>
                    </div>
                  ))}
                </div>

                {/* Action Button */}
                <button
                  onClick={() => handleSelectPlan(plan)}
                  disabled={plan.id === currentPlan}
                  className={`w-full py-4 px-6 rounded-xl font-semibold text-white transition-all duration-300 shadow-lg ${
                    plan.id === currentPlan
                      ? 'bg-gray-400 cursor-not-allowed'
                      : plan.buttonColor
                  }`}
                >
                  {plan.id === currentPlan ? '‚úÖ ƒêang S·ª≠ D·ª•ng' : 
                   plan.price === 0 ? 'S·ª≠ D·ª•ng Mi·ªÖn Ph√≠' : 'N√¢ng C·∫•p Ngay'}
                </button>

                {plan.id === currentPlan && (
                  <p className="text-center text-sm text-gray-500 mt-3">
                    G√≥i hi·ªán t·∫°i c·ªßa b·∫°n
                  </p>
                )}
              </div>
            </div>
          ))}
        </div>

        {/* Features Comparison */}
        <div className="mt-20">
          <h2 className="text-3xl font-bold text-center text-gray-800 mb-12">
            üîç So S√°nh Chi Ti·∫øt C√°c G√≥i
          </h2>
          
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-green-600 text-white">
                  <tr>
                    <th className="px-6 py-4 text-left">T√≠nh NƒÉng</th>
                    <th className="px-6 py-4 text-center">Mi·ªÖn Ph√≠</th>
                    <th className="px-6 py-4 text-center">C∆° B·∫£n</th>
                    <th className="px-6 py-4 text-center">Cao C·∫•p</th>
                    <th className="px-6 py-4 text-center">VIP</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {[
                    ['Theo d√µi ti·∫øn tr√¨nh c∆° b·∫£n', '‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ'],
                    ['K·∫ø ho·∫°ch cai thu·ªëc n√¢ng cao', '‚ùå', '‚úÖ', '‚úÖ', '‚úÖ'],
                    ['T∆∞ v·∫•n chuy√™n gia', '‚ùå', 'Chat', '1:1', 'Mentor c√° nh√¢n'],
                    ['B√°o c√°o chi ti·∫øt', '‚ùå', '‚úÖ', '‚úÖ', '‚úÖ'],
                    ['H·ªó tr·ª£ 24/7', '‚ùå', '‚ùå', '‚úÖ', '‚úÖ'],
                    ['Kh√°m s·ª©c kh·ªèe', '‚ùå', '‚ùå', '‚ùå', '‚úÖ'],
                    ['C·ªông ƒë·ªìng VIP', '‚ùå', '‚ùå', '‚ùå', '‚úÖ']
                  ].map((row, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="px-6 py-4 font-medium text-gray-800">{row[0]}</td>
                      <td className="px-6 py-4 text-center">{row[1]}</td>
                      <td className="px-6 py-4 text-center">{row[2]}</td>
                      <td className="px-6 py-4 text-center">{row[3]}</td>
                      <td className="px-6 py-4 text-center">{row[4]}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* FAQ Section */}
        <div className="mt-20">
          <h2 className="text-3xl font-bold text-center text-gray-800 mb-12">
            ‚ùì C√¢u H·ªèi Th∆∞·ªùng G·∫∑p
          </h2>
          
          <div className="max-w-4xl mx-auto space-y-6">
            {[
              {
                q: "T√¥i c√≥ th·ªÉ thay ƒë·ªïi g√≥i membership b·∫•t c·ª© l√∫c n√†o kh√¥ng?",
                a: "C√≥, b·∫°n c√≥ th·ªÉ n√¢ng c·∫•p ho·∫∑c h·∫° c·∫•p g√≥i membership b·∫•t c·ª© l√∫c n√†o. S·ªë ti·ªÅn c√≤n l·∫°i s·∫Ω ƒë∆∞·ª£c t√≠nh theo t·ª∑ l·ªá."
              },
              {
                q: "G√≥i VIP c√≥ ƒë·∫£m b·∫£o th√†nh c√¥ng 100% kh√¥ng?",
                a: "Ch√∫ng t√¥i cam k·∫øt h·ªó tr·ª£ t·ªëi ƒëa v·ªõi g√≥i VIP. N·∫øu kh√¥ng ƒë·∫°t m·ª•c ti√™u sau 6 th√°ng, b·∫°n s·∫Ω ƒë∆∞·ª£c ho√†n ti·ªÅn ho·∫∑c gia h·∫°n mi·ªÖn ph√≠."
              },
              {
                q: "T√¥i c√≥ th·ªÉ h·ªßy subscription kh√¥ng?",
                a: "C√≥, b·∫°n c√≥ th·ªÉ h·ªßy b·∫•t c·ª© l√∫c n√†o t·ª´ trang c√†i ƒë·∫∑t. D·ªãch v·ª• s·∫Ω ti·∫øp t·ª•c cho ƒë·∫øn h·∫øt chu k·ª≥ ƒë√£ thanh to√°n."
              }
            ].map((faq, index) => (
              <div key={index} className="bg-white rounded-lg shadow-md p-6">
                <h3 className="font-bold text-gray-800 mb-3">{faq.q}</h3>
                <p className="text-gray-600 leading-relaxed">{faq.a}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Payment Modal */}
      {showPaymentModal && selectedPlan && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl shadow-xl max-w-md w-full p-8">
            <h3 className="text-2xl font-bold text-gray-800 mb-6">
              Thanh To√°n G√≥i {selectedPlan.name}
            </h3>
            
            <div className="mb-6">
              <div className="text-lg">
                <span className="text-gray-600">T·ªïng ti·ªÅn: </span>
                <span className="font-bold text-green-600 text-xl">
                  {formatCurrency(selectedPlan.price)}
                </span>
              </div>
              <div className="text-sm text-gray-500">
                Chu k·ª≥: {selectedPlan.duration}
              </div>
            </div>

            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Ph∆∞∆°ng th·ª©c thanh to√°n
              </label>
              <div className="space-y-3">
                {[
                  { id: 'credit_card', label: 'üí≥ Th·∫ª t√≠n d·ª•ng/ghi n·ª£' },
                  { id: 'momo', label: 'üì± MoMo' },
                  { id: 'banking', label: 'üè¶ Chuy·ªÉn kho·∫£n ng√¢n h√†ng' }
                ].map((method) => (
                  <label key={method.id} className="flex items-center">
                    <input
                      type="radio"
                      name="payment"
                      value={method.id}
                      checked={paymentMethod === method.id}
                      onChange={(e) => setPaymentMethod(e.target.value)}
                      className="mr-3"
                    />
                    {method.label}
                  </label>
                ))}
              </div>
            </div>

            <div className="flex space-x-4">
              <button
                onClick={() => setShowPaymentModal(false)}
                className="flex-1 py-3 px-4 border border-gray-300 rounded-lg font-medium text-gray-700 hover:bg-gray-50 transition duration-300"
                disabled={processing}
              >
                H·ªßy
              </button>
              <button
                onClick={() => handleUpgrade(selectedPlan)}
                disabled={processing}
                className="flex-1 py-3 px-4 bg-green-600 text-white rounded-lg font-medium hover:bg-green-700 transition duration-300 disabled:opacity-50"
              >
                {processing ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MembershipPage;
