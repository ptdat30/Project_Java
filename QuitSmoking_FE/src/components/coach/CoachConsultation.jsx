import React, { useState, useEffect, useRef } from "react";
const CoachConsultation = () => {
  const [coaches, setCoaches] = useState([]);
  const [selectedCoach, setSelectedCoach] = useState(null);
  const [activeSession, setActiveSession] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [sessionType, setSessionType] = useState("CHAT");
  const messagesEndRef = useRef(null);
  useEffect(() => {
    // Mock data - coaches
    setCoaches([
      {
        id: "1",
        name: "Dr. Nguy·ªÖn Thanh H√†",
        specialty: "Chuy√™n gia cai nghi·ªán thu·ªëc l√°",
        experience: "8 nƒÉm kinh nghi·ªám",
        rating: 4.9,
        totalSessions: 1250,
        avatar: null,
        status: "ONLINE",
        description:
          "B√°c sƒ© chuy√™n v·ªÅ t√¢m l√Ω v√† h√†nh vi cai nghi·ªán. ƒê√£ gi√∫p h∆°n 1000 ng∆∞·ªùi cai thu·ªëc th√†nh c√¥ng.",
        price: 150000,
        specialties: ["T√¢m l√Ω h·ªçc", "Li·ªáu ph√°p h√†nh vi", "Coaching cai nghi·ªán"],
      },
      {
        id: "2",
        name: "ThS. Tr·∫ßn Minh Tu·∫•n",
        specialty: "T∆∞ v·∫•n s·ª©c kh·ªèe t√¢m th·∫ßn",
        experience: "5 nƒÉm kinh nghi·ªám",
        rating: 4.8,
        totalSessions: 890,
        avatar: null,
        status: "BUSY",
        description:
          "Chuy√™n gia t√¢m l√Ω l√¢m s√†ng v·ªõi ph∆∞∆°ng ph√°p ti·∫øp c·∫≠n nh√¢n vƒÉn.",
        price: 120000,
        specialties: [
          "T√¢m l√Ω l√¢m s√†ng",
          "Tr·ªã li·ªáu nh·∫≠n th·ª©c",
          "Qu·∫£n l√Ω stress",
        ],
      },
      {
        id: "3",
        name: "Coach L√™ Th·ªã Mai",
        specialty: "Life Coach chuy√™n cai nghi·ªán",
        experience: "6 nƒÉm kinh nghi·ªám",
        rating: 4.7,
        totalSessions: 650,
        avatar: null,
        status: "ONLINE",
        description:
          "Life coach chuy√™n v·ªÅ thay ƒë·ªïi th√≥i quen v√† x√¢y d·ª±ng l·ªëi s·ªëng t√≠ch c·ª±c.",
        price: 100000,
        specialties: ["Life Coaching", "Thay ƒë·ªïi th√≥i quen", "Motivation"],
      },
    ]);
    // Mock active session
    setActiveSession({
      id: "1",
      coachId: "1",
      status: "ACTIVE",
      sessionType: "CHAT",
      startTime: new Date().toISOString(),
      duration: 30,
    });
    // Mock messages
    setMessages([
      {
        id: "1",
        senderId: "1",
        senderType: "COACH",
        content:
          "Ch√†o b·∫°n! T√¥i l√† Dr. H√†. R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n trong h√†nh tr√¨nh cai thu·ªëc. B·∫°n ƒë√£ cai thu·ªëc ƒë∆∞·ª£c bao l√¢u r·ªìi?",
        timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
        messageType: "TEXT",
      },
      {
        id: "2",
        senderId: "user",
        senderType: "USER",
        content:
          "Ch√†o b√°c sƒ©! Em ƒë√£ cai ƒë∆∞·ª£c 25 ng√†y r·ªìi ·∫°. Nh∆∞ng h√¥m nay em c·∫£m th·∫•y r·∫•t mu·ªën h√∫t thu·ªëc.",
        timestamp: new Date(Date.now() - 3 * 60 * 1000).toISOString(),
        messageType: "TEXT",
      },
      {
        id: "3",
        senderId: "1",
        senderType: "COACH",
        content:
          "Tuy·ªát v·ªùi! 25 ng√†y l√† m·ªôt th√†nh t√≠ch ƒë√°ng t·ª± h√†o. C·∫£m gi√°c mu·ªën h√∫t thu·ªëc l√† b√¨nh th∆∞·ªùng. B·∫°n c√≥ th·ªÉ chia s·∫ª ƒëi·ªÅu g√¨ ƒëang l√†m b·∫°n cƒÉng th·∫≥ng kh√¥ng?",
        timestamp: new Date(Date.now() - 1 * 60 * 1000).toISOString(),
        messageType: "TEXT",
      },
    ]);
  }, []);
  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };
  const handleSendMessage = (e) => {
    e.preventDefault();
    if (!newMessage.trim()) return;
    const message = {
      id: Date.now().toString(),
      senderId: "user",
      senderType: "USER",
      content: newMessage,
      timestamp: new Date().toISOString(),
      messageType: "TEXT",
    };
    setMessages([...messages, message]);
    setNewMessage("");
    // Simulate coach response after 2 seconds
    setTimeout(() => {
      const coachResponse = {
        id: (Date.now() + 1).toString(),
        senderId: selectedCoach?.id || "1",
        senderType: "COACH",
        content: getCoachResponse(newMessage),
        timestamp: new Date().toISOString(),
        messageType: "TEXT",
      };
      setMessages((prev) => [...prev, coachResponse]);
    }, 2000);
  };
  const getCoachResponse = (userMessage) => {
    const responses = [
      "T√¥i hi·ªÉu c·∫£m gi√°c c·ªßa b·∫°n. H√£y th·ª≠ √°p d·ª•ng k·ªπ thu·∫≠t h√≠t th·ªü s√¢u 4-7-8: H√≠t v√†o trong 4 gi√¢y, gi·ªØ 7 gi√¢y, th·ªü ra trong 8 gi√¢y.",
      "ƒê√≥ l√† ph·∫£n ·ª©ng t·ª± nhi√™n c·ªßa c∆° th·ªÉ. H√£y u·ªëng m·ªôt ly n∆∞·ªõc l·∫°nh v√† ƒëi b·ªô 5 ph√∫t ƒë·ªÉ chuy·ªÉn h∆∞·ªõng s·ª± ch√∫ √Ω.",
      "B·∫°n ƒëang l√†m r·∫•t t·ªët! H√£y nh·ªõ l·∫°i l√Ω do ban ƒë·∫ßu khi·∫øn b·∫°n mu·ªën cai thu·ªëc. ƒêi·ªÅu ƒë√≥ s·∫Ω gi√∫p b·∫°n v∆∞·ª£t qua.",
      "C√≥ th·ªÉ b·∫°n c·∫ßn m·ªôt ho·∫°t ƒë·ªông thay th·∫ø. H√£y th·ª≠ nhai k·∫πo cao su ho·∫∑c gi·ªØ tay b·∫≠n r·ªôn v·ªõi fidget spinner.",
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  };
  const handleStartSession = (coach) => {
    setSelectedCoach(coach);
    setActiveSession({
      id: Date.now().toString(),
      coachId: coach.id,
      status: "ACTIVE",
      sessionType: sessionType,
      startTime: new Date().toISOString(),
      duration: 30,
    });
    setMessages([
      {
        id: "1",
        senderId: coach.id,
        senderType: "COACH",
        content: `Ch√†o b·∫°n! T√¥i l√† ${coach.name}. R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n trong h√†nh tr√¨nh cai thu·ªëc. B·∫°n c√≥ th·ªÉ chia s·∫ª v·ªÅ t√¨nh h√¨nh hi·ªán t·∫°i c·ªßa m√¨nh kh√¥ng?`,
        timestamp: new Date().toISOString(),
        messageType: "TEXT",
      },
    ]);
  };
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(amount);
  };
  const formatTime = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
    });
  };
  if (activeSession && selectedCoach) {
    return (
      <div className="h-screen flex flex-col bg-gray-50">
        {/* Chat Header */}
        <div className="bg-white border-b border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <button
                onClick={() => {
                  setActiveSession(null);
                  setSelectedCoach(null);
                  setMessages([]);
                }}
                className="mr-4 p-2 text-gray-500 hover:text-gray-700"
              >
                ‚Üê
              </button>
              <div className="h-10 w-10 rounded-full bg-green-600 flex items-center justify-center">
                <span className="text-white font-medium">
                  {selectedCoach.name.charAt(0)}
                </span>
              </div>
              <div className="ml-3">
                <h3 className="text-lg font-medium text-gray-900">
                  {selectedCoach.name}
                </h3>
                <p className="text-sm text-green-600">‚óè Online</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-500">
                Phi√™n t∆∞ v·∫•n: {sessionType === "CHAT" ? "Chat" : "Video call"}
              </span>
              <button className="p-2 text-gray-500 hover:text-red-600">
                üìû
              </button>
              <button className="p-2 text-gray-500 hover:text-red-600">
                üîö
              </button>
            </div>
          </div>
        </div>
        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${
                message.senderType === "USER" ? "justify-end" : "justify-start"
              }`}
            >
              <div
                className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                  message.senderType === "USER"
                    ? "bg-blue-600 text-white"
                    : "bg-white text-gray-900 border border-gray-200"
                }`}
              >
                <p className="text-sm">{message.content}</p>
                <p
                  className={`text-xs mt-1 ${
                    message.senderType === "USER"
                      ? "text-blue-100"
                      : "text-gray-500"
                  }`}
                >
                  {formatTime(message.timestamp)}
                </p>
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>
        {/* Message Input */}
        <div className="bg-white border-t border-gray-200 p-4">
          <form onSubmit={handleSendMessage} className="flex space-x-4">
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              className="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
            />
            <button
              type="submit"
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              G·ª≠i
            </button>
          </form>
        </div>
      </div>
    );
  }
  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            T∆∞ v·∫•n v·ªõi Coach
          </h1>
          <p className="text-gray-600 mb-4">
            Nh·∫≠n h·ªó tr·ª£ chuy√™n nghi·ªáp t·ª´ c√°c hu·∫•n luy·ªán vi√™n cai nghi·ªán thu·ªëc l√°
          </p>

          {/* Session Type Selection */}
          <div className="flex space-x-4">
            <label className="flex items-center">
              <input
                type="radio"
                value="CHAT"
                checked={sessionType === "CHAT"}
                onChange={(e) => setSessionType(e.target.value)}
                className="mr-2"
              />
              üí¨ Chat tr·ª±c tuy·∫øn
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                value="VIDEO_CALL"
                checked={sessionType === "VIDEO_CALL"}
                onChange={(e) => setSessionType(e.target.value)}
                className="mr-2"
              />
              üìπ Video call
            </label>
          </div>
        </div>
        {/* Coaches List */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {coaches.map((coach) => (
            <div key={coach.id} className="bg-white rounded-lg shadow-sm p-6">
              {/* Coach Header */}
              <div className="flex items-center mb-4">
                <div className="h-16 w-16 rounded-full bg-green-600 flex items-center justify-center">
                  <span className="text-white text-xl font-medium">
                    {coach.name.charAt(0)}
                  </span>
                </div>
                <div className="ml-4">
                  <h3 className="text-lg font-semibold text-gray-900">
                    {coach.name}
                  </h3>
                  <p className="text-sm text-gray-600">{coach.specialty}</p>
                  <div className="flex items-center mt-1">
                    <span
                      className={`inline-block w-2 h-2 rounded-full mr-2 ${
                        coach.status === "ONLINE"
                          ? "bg-green-500"
                          : "bg-yellow-500"
                      }`}
                    />
                    <span className="text-xs text-gray-500">
                      {coach.status === "ONLINE" ? "Tr·ª±c tuy·∫øn" : "B·∫≠n"}
                    </span>
                  </div>
                </div>
              </div>
              {/* Coach Info */}
              <div className="mb-4">
                <p className="text-sm text-gray-600 mb-2">
                  {coach.description}
                </p>

                <div className="flex items-center justify-between text-sm text-gray-500 mb-2">
                  <span>{coach.experience}</span>
                  <span>‚≠ê {coach.rating}</span>
                </div>

                <p className="text-sm text-gray-500 mb-3">
                  {coach.totalSessions} phi√™n t∆∞ v·∫•n
                </p>
                {/* Specialties */}
                <div className="flex flex-wrap gap-1 mb-4">
                  {coach.specialties.map((specialty, index) => (
                    <span
                      key={index}
                      className="px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded-full"
                    >
                      {specialty}
                    </span>
                  ))}
                </div>
              </div>
              {/* Pricing and Action */}
              <div className="border-t border-gray-100 pt-4">
                <div className="flex items-center justify-between mb-4">
                  <span className="text-lg font-semibold text-gray-900">
                    {formatCurrency(coach.price)}
                  </span>
                  <span className="text-sm text-gray-500">/ phi√™n</span>
                </div>

                <button
                  onClick={() => handleStartSession(coach)}
                  disabled={coach.status === "BUSY"}
                  className={`w-full py-2 px-4 rounded-lg font-medium ${
                    coach.status === "ONLINE"
                      ? "bg-green-600 text-white hover:bg-green-700"
                      : "bg-gray-300 text-gray-500 cursor-not-allowed"
                  }`}
                >
                  {coach.status === "ONLINE"
                    ? `B·∫Øt ƒë·∫ßu ${
                        sessionType === "CHAT" ? "chat" : "video call"
                      }`
                    : "Hi·ªán kh√¥ng kh·∫£ d·ª•ng"}
                </button>
              </div>
            </div>
          ))}
        </div>
        {/* Help Section */}
        <div className="mt-12 bg-blue-50 rounded-lg p-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4">
            üí° C√°ch t·∫≠n d·ª•ng t·ªëi ƒëa phi√™n t∆∞ v·∫•n
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 className="font-semibold text-gray-900 mb-2">
                Tr∆∞·ªõc phi√™n t∆∞ v·∫•n:
              </h3>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>‚Ä¢ Chu·∫©n b·ªã nh·ªØng c√¢u h·ªèi c·ª• th·ªÉ</li>
                <li>‚Ä¢ Ghi ch√∫ t√¨nh h√¨nh hi·ªán t·∫°i c·ªßa b·∫°n</li>
                <li>‚Ä¢ Chia s·∫ª v·ªÅ nh·ªØng kh√≥ khƒÉn ƒëang g·∫∑p</li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold text-gray-900 mb-2">
                Trong phi√™n t∆∞ v·∫•n:
              </h3>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>‚Ä¢ Th√†nh th·∫≠t v√† m·ªü l√≤ng</li>
                <li>‚Ä¢ Ghi ch√∫ l·∫°i l·ªùi khuy√™n quan tr·ªçng</li>
                <li>‚Ä¢ ƒê·∫∑t c√¢u h·ªèi khi kh√¥ng hi·ªÉu</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
export default CoachConsultation;
