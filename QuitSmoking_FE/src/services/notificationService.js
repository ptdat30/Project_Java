import { toast } from "react-toastify";

class NotificationService {
  constructor() {
    this.lastNotificationTime = 0;
    this.notificationCooldown = 5000; // 5 gi√¢y
    this.pendingNotifications = new Map(); // L∆∞u th√¥ng b√°o ch·ªù hi·ªÉn th·ªã
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o tin nh·∫Øn m·ªõi v·ªõi gi·ªõi h·∫°n t·∫ßn su·∫•t
  showNewMessageNotification(senderName, sessionId) {
    const now = Date.now();
    
    // Lu√¥n th√™m session v√†o danh s√°ch unread, b·∫•t k·ªÉ ƒëang ·ªü trang n√†o
    this.addUnreadSession(sessionId);
    
    // Ki·ªÉm tra xem c√≥ ƒëang ·ªü trang chat kh√¥ng
    const isOnChatPage = window.location.pathname === '/coach-consultation';
    if (isOnChatPage) {
      return; // Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o khi ƒëang ·ªü trang chat
    }

    // Ki·ªÉm tra cooldown
    if (now - this.lastNotificationTime < this.notificationCooldown) {
      // N·∫øu ch∆∞a ƒë·∫øn l√∫c hi·ªÉn th·ªã, l∆∞u v√†o danh s√°ch ch·ªù
      this.pendingNotifications.set(sessionId, {
        senderName,
        sessionId,
        timestamp: now
      });
      return;
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o
    this.displayNotification(senderName, sessionId);
    this.lastNotificationTime = now;

    // L√™n l·ªãch hi·ªÉn th·ªã th√¥ng b√°o ch·ªù sau 5 gi√¢y
    setTimeout(() => {
      this.showPendingNotifications();
    }, this.notificationCooldown);
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o
  displayNotification(senderName, sessionId) {
    toast.info(`üí¨ Tin nh·∫Øn m·ªõi t·ª´ ${senderName}`, {
      position: "top-right",
      autoClose: 4000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      onClick: () => {
        // Chuy·ªÉn ƒë·∫øn trang chat khi click
        window.location.href = '/coach-consultation';
      }
    });
  }

  // Hi·ªÉn th·ªã c√°c th√¥ng b√°o ch·ªù
  showPendingNotifications() {
    if (this.pendingNotifications.size === 0) {
      return;
    }

    const now = Date.now();
    const notificationsToShow = [];

    // L·∫•y t·∫•t c·∫£ th√¥ng b√°o ch·ªù
    for (const [sessionId, notification] of this.pendingNotifications) {
      notificationsToShow.push(notification);
    }

    // X√≥a danh s√°ch ch·ªù
    this.pendingNotifications.clear();

    if (notificationsToShow.length === 1) {
      // Ch·ªâ c√≥ 1 th√¥ng b√°o
      const notification = notificationsToShow[0];
      this.displayNotification(notification.senderName, notification.sessionId);
    } else {
      // C√≥ nhi·ªÅu th√¥ng b√°o, hi·ªÉn th·ªã t·ªïng h·ª£p
      const uniqueSenders = [...new Set(notificationsToShow.map(n => n.senderName))];
      if (uniqueSenders.length === 1) {
        // T·∫•t c·∫£ t·ª´ c√πng 1 ng∆∞·ªùi
        toast.info(`üí¨ ${notificationsToShow.length} tin nh·∫Øn m·ªõi t·ª´ ${uniqueSenders[0]}`, {
          position: "top-right",
          autoClose: 4000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          onClick: () => {
            window.location.href = '/coach-consultation';
          }
        });
      } else {
        // T·ª´ nhi·ªÅu ng∆∞·ªùi kh√°c nhau
        toast.info(`üí¨ ${notificationsToShow.length} tin nh·∫Øn m·ªõi t·ª´ ${uniqueSenders.length} ng∆∞·ªùi d√πng`, {
          position: "top-right",
          autoClose: 4000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          onClick: () => {
            window.location.href = '/coach-consultation';
          }
        });
      }
    }

    this.lastNotificationTime = now;
  }

  // Reset cooldown (c√≥ th·ªÉ g·ªçi khi user chuy·ªÉn trang)
  resetCooldown() {
    this.lastNotificationTime = 0;
  }

  // X√≥a t·∫•t c·∫£ th√¥ng b√°o ch·ªù
  clearPendingNotifications() {
    this.pendingNotifications.clear();
  }

  // L∆∞u sessionId c√≥ tin nh·∫Øn m·ªõi v√†o localStorage
  addUnreadSession(sessionId) {
    let unread = JSON.parse(localStorage.getItem('unreadSessions') || '[]');
    if (!unread.includes(sessionId)) {
      unread.push(sessionId);
      localStorage.setItem('unreadSessions', JSON.stringify(unread));
      
      // Dispatch event ƒë·ªÉ th√¥ng b√°o component c·∫≠p nh·∫≠t
      window.dispatchEvent(new CustomEvent('unreadSessionsUpdate'));
    }
  }

  // X√≥a sessionId kh·ªèi danh s√°ch unread
  removeUnreadSession(sessionId) {
    let unread = JSON.parse(localStorage.getItem('unreadSessions') || '[]');
    unread = unread.filter(id => id !== sessionId);
    localStorage.setItem('unreadSessions', JSON.stringify(unread));
    
    // Dispatch event ƒë·ªÉ th√¥ng b√°o component c·∫≠p nh·∫≠t
    window.dispatchEvent(new CustomEvent('unreadSessionsUpdate'));
  }

  // L·∫•y danh s√°ch unread
  getUnreadSessions() {
    return JSON.parse(localStorage.getItem('unreadSessions') || '[]');
  }
}

// T·∫°o instance singleton
const notificationService = new NotificationService();
export default notificationService; 