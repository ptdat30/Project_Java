package com.quitsmoking.services;
import com.quitsmoking.model.Achievement;
import com.quitsmoking.model.Notification;
import com.quitsmoking.model.User;
import com.quitsmoking.reponsitories.NotificationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Random;
@Service
public class NotificationService {
    @Autowired
    private NotificationRepository notificationRepository;
    private final String[] motivationalMessages = {
        "B·∫°n ƒëang l√†m r·∫•t t·ªët! H√£y ti·∫øp t·ª•c duy tr√¨!",
        "M·ªói ng√†y kh√¥ng h√∫t thu·ªëc l√† m·ªôt chi·∫øn th·∫Øng!",
        "S·ª©c kh·ªèe c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c c·∫£i thi·ªán t·ª´ng ng√†y!",
        "H√£y nh·ªõ l√Ω do t·∫°i sao b·∫°n mu·ªën cai thu·ªëc!",
        "B·∫°n m·∫°nh m·∫Ω h∆°n c∆°n th√®m thu·ªëc!",
        "T∆∞∆°ng lai kh·ªèe m·∫°nh ƒëang ch·ªù ƒë·ª£i b·∫°n!",
        "M·ªói ƒëi·∫øu thu·ªëc t·ª´ ch·ªëi l√† m·ªôt b∆∞·ªõc ti·∫øn!",
        "Gia ƒë√¨nh b·∫°n t·ª± h√†o v·ªÅ quy·∫øt ƒë·ªãnh n√†y!",
        "Ti·ªÅn ti·∫øt ki·ªám ƒë∆∞·ª£c c√≥ th·ªÉ mua nhi·ªÅu th·ª© hay ho!",
        "C∆° th·ªÉ b·∫°n ƒëang c·∫£m ∆°n b·∫°n v√¨ quy·∫øt ƒë·ªãnh n√†y!"
    };
    public List<Notification> getUserNotifications(User user) {
        return notificationRepository.findByUserOrderByCreatedAtDesc(user);
    }
    public List<Notification> getUnreadNotifications(User user) {
        return notificationRepository.findByUserAndIsReadFalseOrderByCreatedAtDesc(user);
    }
    public Long getUnreadNotificationCount(User user) {
        return notificationRepository.countUnreadNotifications(user);
    }
    public void markAsRead(String notificationId) {
        Notification notification = notificationRepository.findById(notificationId)
            .orElseThrow(() -> new RuntimeException("Notification not found"));
        notification.setRead(true);
        notificationRepository.save(notification);
    }
    public void sendAchievementNotification(User user, Achievement achievement) {
        String title = "üèÜ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c th√†nh t√≠ch m·ªõi!";
        String message = String.format("B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c huy hi·ªáu '%s': %s", 
                                     achievement.getName(), achievement.getDescription());
        
        Notification notification = new Notification(user, title, message, 
                                                   Notification.NotificationType.ACHIEVEMENT);
        notificationRepository.save(notification);
    }
    public void sendMotivationNotification(User user, String customMessage) {
        String title = "üí™ ƒê·ªông vi√™n cho b·∫°n!";
        String message = customMessage != null ? customMessage : getRandomMotivationalMessage();
        
        Notification notification = new Notification(user, title, message, 
                                                   Notification.NotificationType.MOTIVATION);
        notificationRepository.save(notification);
    }
    public void sendReminderNotification(User user, String reminderMessage) {
        String title = "‚è∞ Nh·∫Øc nh·ªü";
        
        Notification notification = new Notification(user, title, reminderMessage, 
                                                   Notification.NotificationType.REMINDER);
        notificationRepository.save(notification);
    }
    public void scheduleNotification(User user, String title, String message, 
                                   Notification.NotificationType type, LocalDateTime scheduledTime) {
        Notification notification = new Notification(user, title, message, type);
        notification.setScheduledTime(scheduledTime);
        notificationRepository.save(notification);
    }
    private String getRandomMotivationalMessage() {
        Random random = new Random();
        return motivationalMessages[random.nextInt(motivationalMessages.length)];
    }
    // Scheduled task ƒë·ªÉ g·ª≠i th√¥ng b√°o ƒë·ªông vi√™n h√†ng ng√†y
    @Scheduled(cron = "0 0 9 * * ?") // M·ªói ng√†y l√∫c 9h s√°ng
    public void sendDailyMotivation() {
        // Logic ƒë·ªÉ g·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ users active
        // C√≥ th·ªÉ implement sau khi c√≥ UserService
    }
    // Scheduled task ƒë·ªÉ g·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü h√†ng tu·∫ßn
    @Scheduled(cron = "0 0 9 * * MON") // M·ªói th·ª© 2 l√∫c 9h s√°ng
    public void sendWeeklyReminder() {
        // Logic ƒë·ªÉ g·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü l√Ω do cai thu·ªëc
    }
    // X·ª≠ l√Ω th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch
    @Scheduled(fixedRate = 60000) // Ki·ªÉm tra m·ªói ph√∫t
    public void processScheduledNotifications() {
        List<Notification> scheduledNotifications = 
            notificationRepository.findScheduledNotifications(LocalDateTime.now());
        
        for (Notification notification : scheduledNotifications) {
            // ƒê√°nh d·∫•u l√† ƒë√£ g·ª≠i b·∫±ng c√°ch x√≥a scheduled_time
            notification.setScheduledTime(null);
            notificationRepository.save(notification);
        }
    }
    public void sendCustomNotification(User user, String title, String message, 
                                     Notification.NotificationType type) {
        Notification notification = new Notification(user, title, message, type);
        notificationRepository.save(notification);
    }
    public void deleteNotification(String notificationId) {
        notificationRepository.deleteById(notificationId);
    }
    public void markAllAsRead(User user) {
        List<Notification> unreadNotifications = getUnreadNotifications(user);
        for (Notification notification : unreadNotifications) {
            notification.setRead(true);
        }
        notificationRepository.saveAll(unreadNotifications);
    }
}